use crate::primitive::Primitive;

#[test]
fn is_numberic() {
    assert!(!Primitive::Boolean(None).is_numberic());
    assert!(!Primitive::Character(None).is_numberic());
    assert!(Primitive::Integer(None).is_numberic());
    assert!(Primitive::Float(None).is_numberic());
    assert!(!Primitive::EnumObject(None).is_numberic());
    assert!(!Primitive::Date(None).is_numberic());
    assert!(!Primitive::DateTime(None).is_numberic());
    assert!(!Primitive::DataSpec(None).is_numberic());
    assert!(!Primitive::Interval(None).is_numberic());
    assert!(!Primitive::Guid(None).is_numberic());
    assert!(!Primitive::Reference(None).is_numberic());
    assert!(!Primitive::Object(None).is_numberic());
    assert!(!Primitive::List(None).is_numberic());
    assert!(!Primitive::Set(None).is_numberic());
    assert!(!Primitive::Map(None).is_numberic());
    assert!(!Primitive::Sequence(None).is_numberic());
    assert!(!Primitive::Edge(None).is_numberic());
    assert!(!Primitive::Walk(None).is_numberic());
    assert!(!Primitive::EnumClass(None).is_numberic());
    assert!(!Primitive::Property(None).is_numberic());
    assert!(!Primitive::Attribute(None).is_numberic());
    assert!(!Primitive::Class(None).is_numberic());
    assert!(!Primitive::Tuple(None).is_numberic());
    assert!(!Primitive::Blob(None).is_numberic());
    assert!(!Primitive::Identifier(None).is_numberic());
}

#[test]
fn is_basic() {
    assert!(Primitive::Boolean(None).is_basic());
    assert!(Primitive::Character(None).is_basic());
    assert!(Primitive::Integer(None).is_basic());
    assert!(Primitive::Float(None).is_basic());
    assert!(Primitive::EnumObject(None).is_basic());
    assert!(Primitive::Date(None).is_basic());
    assert!(Primitive::DateTime(None).is_basic());
    assert!(!Primitive::DataSpec(None).is_basic());
    assert!(Primitive::Interval(None).is_basic());
    assert!(!Primitive::Reference(None).is_basic());
    assert!(!Primitive::Object(None).is_basic());
    assert!(!Primitive::List(None).is_basic());
    assert!(!Primitive::Set(None).is_basic());
    assert!(!Primitive::Map(None).is_basic());
    assert!(!Primitive::Sequence(None).is_basic());
    assert!(!Primitive::Edge(None).is_basic());
    assert!(!Primitive::Walk(None).is_basic());
    assert!(!Primitive::EnumClass(None).is_basic());
    assert!(!Primitive::Property(None).is_basic());
    assert!(!Primitive::Attribute(None).is_basic());
    assert!(!Primitive::Class(None).is_basic());
    assert!(!Primitive::Tuple(None).is_basic());
    assert!(!Primitive::Blob(None).is_basic());
    assert!(Primitive::Identifier(None).is_basic());
}

#[test]
fn is_collection() {
    assert!(!Primitive::Boolean(None).is_collection());
    assert!(!Primitive::Character(None).is_collection());
    assert!(!Primitive::Integer(None).is_collection());
    assert!(!Primitive::Float(None).is_collection());
    assert!(!Primitive::EnumObject(None).is_collection());
    assert!(!Primitive::Date(None).is_collection());
    assert!(!Primitive::DateTime(None).is_collection());
    assert!(!Primitive::DataSpec(None).is_collection());
    assert!(!Primitive::Interval(None).is_collection());
    assert!(!Primitive::Reference(None).is_collection());
    assert!(!Primitive::Object(None).is_collection());
    assert!(Primitive::List(None).is_collection());
    assert!(Primitive::Set(None).is_collection());
    assert!(Primitive::Map(None).is_collection());
    assert!(!Primitive::Sequence(None).is_collection());
    assert!(!Primitive::Edge(None).is_collection());
    assert!(!Primitive::Walk(None).is_collection());
    assert!(!Primitive::EnumClass(None).is_collection());
    assert!(!Primitive::Property(None).is_collection());
    assert!(!Primitive::Attribute(None).is_collection());
    assert!(!Primitive::Class(None).is_collection());
    assert!(!Primitive::Tuple(None).is_collection());
    assert!(!Primitive::Blob(None).is_collection());
    assert!(!Primitive::Identifier(None).is_collection());
}

#[test]
fn is_object_or_reference() {
    assert!(!Primitive::Boolean(None).is_object_or_reference());
    assert!(!Primitive::Character(None).is_object_or_reference());
    assert!(!Primitive::Integer(None).is_object_or_reference());
    assert!(!Primitive::Float(None).is_object_or_reference());
    assert!(!Primitive::EnumObject(None).is_object_or_reference());
    assert!(!Primitive::Date(None).is_object_or_reference());
    assert!(!Primitive::DateTime(None).is_object_or_reference());
    assert!(!Primitive::DataSpec(None).is_object_or_reference());
    assert!(!Primitive::Interval(None).is_object_or_reference());
    assert!(Primitive::Reference(None).is_object_or_reference());
    assert!(Primitive::Object(None).is_object_or_reference());
    assert!(!Primitive::List(None).is_object_or_reference());
    assert!(!Primitive::Set(None).is_object_or_reference());
    assert!(!Primitive::Map(None).is_object_or_reference());
    assert!(!Primitive::Sequence(None).is_object_or_reference());
    assert!(!Primitive::Edge(None).is_object_or_reference());
    assert!(!Primitive::Walk(None).is_object_or_reference());
    assert!(!Primitive::EnumClass(None).is_object_or_reference());
    assert!(!Primitive::Property(None).is_object_or_reference());
    assert!(!Primitive::Attribute(None).is_object_or_reference());
    assert!(!Primitive::Class(None).is_object_or_reference());
    assert!(!Primitive::Tuple(None).is_object_or_reference());
    assert!(!Primitive::Blob(None).is_object_or_reference());
    assert!(!Primitive::Identifier(None).is_object_or_reference());
}

#[test]
fn is_sequenceable() {
    assert!(!Primitive::Boolean(None).is_sequenceable());
    assert!(!Primitive::Character(None).is_sequenceable());
    assert!(!Primitive::Integer(None).is_sequenceable());
    assert!(!Primitive::Float(None).is_sequenceable());
    assert!(!Primitive::EnumObject(None).is_sequenceable());
    assert!(!Primitive::Date(None).is_sequenceable());
    assert!(!Primitive::DateTime(None).is_sequenceable());
    assert!(!Primitive::DataSpec(None).is_sequenceable());
    assert!(!Primitive::Interval(None).is_sequenceable());
    assert!(!Primitive::Reference(None).is_sequenceable());
    assert!(!Primitive::Object(None).is_sequenceable());
    assert!(Primitive::List(None).is_sequenceable());
    assert!(Primitive::Set(None).is_sequenceable());
    assert!(Primitive::Map(None).is_sequenceable());
    assert!(Primitive::Sequence(None).is_sequenceable());
    assert!(!Primitive::Edge(None).is_sequenceable());
    assert!(!Primitive::Walk(None).is_sequenceable());
    assert!(!Primitive::EnumClass(None).is_sequenceable());
    assert!(!Primitive::Property(None).is_sequenceable());
    assert!(!Primitive::Attribute(None).is_sequenceable());
    assert!(!Primitive::Class(None).is_sequenceable());
    assert!(!Primitive::Tuple(None).is_sequenceable());
    assert!(!Primitive::Blob(None).is_sequenceable());
    assert!(!Primitive::Identifier(None).is_sequenceable());
}

#[test]
fn is_schema() {
    assert!(!Primitive::Boolean(None).is_schema());
    assert!(!Primitive::Character(None).is_schema());
    assert!(!Primitive::Integer(None).is_schema());
    assert!(!Primitive::Float(None).is_schema());
    assert!(!Primitive::EnumObject(None).is_schema());
    assert!(!Primitive::Date(None).is_schema());
    assert!(!Primitive::DateTime(None).is_schema());
    assert!(!Primitive::DataSpec(None).is_schema());
    assert!(!Primitive::Interval(None).is_schema());
    assert!(!Primitive::Reference(None).is_schema());
    assert!(!Primitive::Object(None).is_schema());
    assert!(!Primitive::List(None).is_schema());
    assert!(!Primitive::Set(None).is_schema());
    assert!(!Primitive::Map(None).is_schema());
    assert!(!Primitive::Sequence(None).is_schema());
    assert!(!Primitive::Edge(None).is_schema());
    assert!(!Primitive::Walk(None).is_schema());
    assert!(Primitive::EnumClass(None).is_schema());
    assert!(Primitive::Property(None).is_schema());
    assert!(Primitive::Attribute(None).is_schema());
    assert!(Primitive::Class(None).is_schema());
    assert!(!Primitive::Tuple(None).is_schema());
    assert!(!Primitive::Blob(None).is_schema());
    assert!(!Primitive::Identifier(None).is_schema());
}

#[test]
fn is_compatible_with_none_none() {
    assert!(Primitive::Boolean(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(Primitive::Character(None).is_compatible_with(&Primitive::Character(None)));
    assert!(Primitive::Integer(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(Primitive::Float(None).is_compatible_with(&Primitive::Float(None)));
    assert!(Primitive::EnumObject(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(Primitive::Date(None).is_compatible_with(&Primitive::Date(None)));
    assert!(Primitive::Time(None).is_compatible_with(&Primitive::Time(None)));
    assert!(Primitive::DateTime(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(Primitive::ByteString(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(Primitive::Utf8String(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(Primitive::Utf32String(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(Primitive::DataSpec(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(Primitive::Interval(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(Primitive::Guid(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(Primitive::Reference(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(Primitive::Object(None).is_compatible_with(&Primitive::Object(None)));
    assert!(Primitive::List(None).is_compatible_with(&Primitive::List(None)));
    assert!(Primitive::Set(None).is_compatible_with(&Primitive::Set(None)));
    assert!(Primitive::Map(None).is_compatible_with(&Primitive::Map(None)));
    assert!(Primitive::Sequence(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(Primitive::Edge(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(Primitive::Walk(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(Primitive::EnumClass(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(Primitive::Property(None).is_compatible_with(&Primitive::Property(None)));
    assert!(Primitive::Attribute(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(Primitive::Class(None).is_compatible_with(&Primitive::Class(None)));
    assert!(Primitive::Tuple(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(Primitive::Blob(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(Primitive::Identifier(None).is_compatible_with(&Primitive::Identifier(None)));
}

#[test]
fn boolean_is_not_compatible_with() {
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Boolean(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn character_is_not_compatible_with() {
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Character(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn integer_is_not_compatible_with() {
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Integer(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn float_is_not_compatible_with() {
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Float(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn enum_object_is_not_compatible_with() {
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::EnumObject(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn date_is_not_compatible_with() {
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Date(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn date_time_is_not_compatible_with() {
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::DateTime(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn data_spec_is_not_compatible_with() {
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::DataSpec(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn interval_is_not_compatible_with() {
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Interval(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn reference_is_not_compatible_with() {
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Reference(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn object_is_not_compatible_with() {
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Object(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn list_is_not_compatible_with() {
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::List(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn set_is_not_compatible_with() {
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Set(None).is_compatible_with(&Primitive::Identifier(None)));
}

#[test]
fn map_is_not_compatible_with() {
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Map(None).is_compatible_with(&Primitive::Identifier(None)));
}

#[test]
fn sequence_is_not_compatible_with() {
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Sequence(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn edge_is_not_compatible_with() {
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Edge(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn walk_is_not_compatible_with() {
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Walk(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn enum_class_is_not_compatible_with() {
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::EnumClass(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn property_is_not_compatible_with() {
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Property(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn attribute_is_not_compatible_with() {
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Attribute(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn class_is_not_compatible_with() {
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Class(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn tuple_is_not_compatible_with() {
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Blob(None)));
    assert!(!Primitive::Tuple(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn blob_is_not_compatible_with() {
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Blob(None).is_compatible_with(&Primitive::Identifier(None)));
}
#[test]
fn identifier_is_not_compatible_with() {
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Boolean(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Character(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Integer(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Float(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::EnumObject(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Date(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::DateTime(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::DataSpec(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Interval(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Time(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::ByteString(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Utf8String(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Utf32String(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Guid(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Reference(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Object(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::List(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Set(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Map(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Sequence(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Edge(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Walk(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::EnumClass(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Property(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Attribute(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Class(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Tuple(None)));
    assert!(!Primitive::Identifier(None).is_compatible_with(&Primitive::Blob(None)));
}

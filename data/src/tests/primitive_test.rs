use crate::primitive::Primitive;

#[test]
fn is_numberic() {
    assert!(!Primitive::Boolean(None).is_numberic());
    assert!(!Primitive::Character(None).is_numberic());
    assert!(Primitive::Integer(None).is_numberic());
    assert!(Primitive::Float(None).is_numberic());
    assert!(!Primitive::EnumObject(None).is_numberic());
    assert!(!Primitive::Date(None).is_numberic());
    assert!(!Primitive::DateTime(None).is_numberic());
    assert!(!Primitive::DataSpec(None).is_numberic());
    assert!(!Primitive::Interval(None).is_numberic());
    assert!(!Primitive::Guid(None).is_numberic());
    assert!(!Primitive::Reference(None).is_numberic());
    assert!(!Primitive::Object(None).is_numberic());
    assert!(!Primitive::List(None).is_numberic());
    assert!(!Primitive::Set(None).is_numberic());
    assert!(!Primitive::Map(None).is_numberic());
    assert!(!Primitive::Sequence(None).is_numberic());
    assert!(!Primitive::Edge(None).is_numberic());
    assert!(!Primitive::Walk(None).is_numberic());
    assert!(!Primitive::EnumClass(None).is_numberic());
    assert!(!Primitive::Property(None).is_numberic());
    assert!(!Primitive::Attribute(None).is_numberic());
    assert!(!Primitive::Class(None).is_numberic());
    assert!(!Primitive::Tuple(None).is_numberic());
    assert!(!Primitive::Blob(None).is_numberic());
    assert!(!Primitive::Identifier(None).is_numberic());
}

#[test]
fn is_basic() {
    assert!(Primitive::Boolean(None).is_basic());
    assert!(Primitive::Character(None).is_basic());
    assert!(Primitive::Integer(None).is_basic());
    assert!(Primitive::Float(None).is_basic());
    assert!(Primitive::EnumObject(None).is_basic());
    assert!(Primitive::Date(None).is_basic());
    assert!(Primitive::DateTime(None).is_basic());
    assert!(!Primitive::DataSpec(None).is_basic());
    assert!(Primitive::Interval(None).is_basic());
    assert!(!Primitive::Reference(None).is_basic());
    assert!(!Primitive::Object(None).is_basic());
    assert!(!Primitive::List(None).is_basic());
    assert!(!Primitive::Set(None).is_basic());
    assert!(!Primitive::Map(None).is_basic());
    assert!(!Primitive::Sequence(None).is_basic());
    assert!(!Primitive::Edge(None).is_basic());
    assert!(!Primitive::Walk(None).is_basic());
    assert!(!Primitive::EnumClass(None).is_basic());
    assert!(!Primitive::Property(None).is_basic());
    assert!(!Primitive::Attribute(None).is_basic());
    assert!(!Primitive::Class(None).is_basic());
    assert!(!Primitive::Tuple(None).is_basic());
    assert!(!Primitive::Blob(None).is_basic());
    assert!(Primitive::Identifier(None).is_basic());
}

#[test]
fn is_collection() {
    assert!(!Primitive::Boolean(None).is_collection());
    assert!(!Primitive::Character(None).is_collection());
    assert!(!Primitive::Integer(None).is_collection());
    assert!(!Primitive::Float(None).is_collection());
    assert!(!Primitive::EnumObject(None).is_collection());
    assert!(!Primitive::Date(None).is_collection());
    assert!(!Primitive::DateTime(None).is_collection());
    assert!(!Primitive::DataSpec(None).is_collection());
    assert!(!Primitive::Interval(None).is_collection());
    assert!(!Primitive::Reference(None).is_collection());
    assert!(!Primitive::Object(None).is_collection());
    assert!(Primitive::List(None).is_collection());
    assert!(Primitive::Set(None).is_collection());
    assert!(Primitive::Map(None).is_collection());
    assert!(!Primitive::Sequence(None).is_collection());
    assert!(!Primitive::Edge(None).is_collection());
    assert!(!Primitive::Walk(None).is_collection());
    assert!(!Primitive::EnumClass(None).is_collection());
    assert!(!Primitive::Property(None).is_collection());
    assert!(!Primitive::Attribute(None).is_collection());
    assert!(!Primitive::Class(None).is_collection());
    assert!(!Primitive::Tuple(None).is_collection());
    assert!(!Primitive::Blob(None).is_collection());
    assert!(!Primitive::Identifier(None).is_collection());
}

#[test]
fn is_object_or_reference() {
    assert!(!Primitive::Boolean(None).is_object_or_reference());
    assert!(!Primitive::Character(None).is_object_or_reference());
    assert!(!Primitive::Integer(None).is_object_or_reference());
    assert!(!Primitive::Float(None).is_object_or_reference());
    assert!(!Primitive::EnumObject(None).is_object_or_reference());
    assert!(!Primitive::Date(None).is_object_or_reference());
    assert!(!Primitive::DateTime(None).is_object_or_reference());
    assert!(!Primitive::DataSpec(None).is_object_or_reference());
    assert!(!Primitive::Interval(None).is_object_or_reference());
    assert!(Primitive::Reference(None).is_object_or_reference());
    assert!(Primitive::Object(None).is_object_or_reference());
    assert!(!Primitive::List(None).is_object_or_reference());
    assert!(!Primitive::Set(None).is_object_or_reference());
    assert!(!Primitive::Map(None).is_object_or_reference());
    assert!(!Primitive::Sequence(None).is_object_or_reference());
    assert!(!Primitive::Edge(None).is_object_or_reference());
    assert!(!Primitive::Walk(None).is_object_or_reference());
    assert!(!Primitive::EnumClass(None).is_object_or_reference());
    assert!(!Primitive::Property(None).is_object_or_reference());
    assert!(!Primitive::Attribute(None).is_object_or_reference());
    assert!(!Primitive::Class(None).is_object_or_reference());
    assert!(!Primitive::Tuple(None).is_object_or_reference());
    assert!(!Primitive::Blob(None).is_object_or_reference());
    assert!(!Primitive::Identifier(None).is_object_or_reference());
}

#[test]
fn is_sequenceable() {
    assert!(!Primitive::Boolean(None).is_sequenceable());
    assert!(!Primitive::Character(None).is_sequenceable());
    assert!(!Primitive::Integer(None).is_sequenceable());
    assert!(!Primitive::Float(None).is_sequenceable());
    assert!(!Primitive::EnumObject(None).is_sequenceable());
    assert!(!Primitive::Date(None).is_sequenceable());
    assert!(!Primitive::DateTime(None).is_sequenceable());
    assert!(!Primitive::DataSpec(None).is_sequenceable());
    assert!(!Primitive::Interval(None).is_sequenceable());
    assert!(!Primitive::Reference(None).is_sequenceable());
    assert!(!Primitive::Object(None).is_sequenceable());
    assert!(Primitive::List(None).is_sequenceable());
    assert!(Primitive::Set(None).is_sequenceable());
    assert!(Primitive::Map(None).is_sequenceable());
    assert!(Primitive::Sequence(None).is_sequenceable());
    assert!(!Primitive::Edge(None).is_sequenceable());
    assert!(!Primitive::Walk(None).is_sequenceable());
    assert!(!Primitive::EnumClass(None).is_sequenceable());
    assert!(!Primitive::Property(None).is_sequenceable());
    assert!(!Primitive::Attribute(None).is_sequenceable());
    assert!(!Primitive::Class(None).is_sequenceable());
    assert!(!Primitive::Tuple(None).is_sequenceable());
    assert!(!Primitive::Blob(None).is_sequenceable());
    assert!(!Primitive::Identifier(None).is_sequenceable());
}

#[test]
fn is_schema() {
    assert!(!Primitive::Boolean(None).is_schema());
    assert!(!Primitive::Character(None).is_schema());
    assert!(!Primitive::Integer(None).is_schema());
    assert!(!Primitive::Float(None).is_schema());
    assert!(!Primitive::EnumObject(None).is_schema());
    assert!(!Primitive::Date(None).is_schema());
    assert!(!Primitive::DateTime(None).is_schema());
    assert!(!Primitive::DataSpec(None).is_schema());
    assert!(!Primitive::Interval(None).is_schema());
    assert!(!Primitive::Reference(None).is_schema());
    assert!(!Primitive::Object(None).is_schema());
    assert!(!Primitive::List(None).is_schema());
    assert!(!Primitive::Set(None).is_schema());
    assert!(!Primitive::Map(None).is_schema());
    assert!(!Primitive::Sequence(None).is_schema());
    assert!(!Primitive::Edge(None).is_schema());
    assert!(!Primitive::Walk(None).is_schema());
    assert!(Primitive::EnumClass(None).is_schema());
    assert!(Primitive::Property(None).is_schema());
    assert!(Primitive::Attribute(None).is_schema());
    assert!(Primitive::Class(None).is_schema());
    assert!(!Primitive::Tuple(None).is_schema());
    assert!(!Primitive::Blob(None).is_schema());
    assert!(!Primitive::Identifier(None).is_schema());
}
